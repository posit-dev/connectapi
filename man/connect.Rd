% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/connect.R
\name{connect}
\alias{connect}
\title{Create a connection to Posit Connect}
\usage{
connect(
  server = Sys.getenv(paste0(prefix, "_SERVER"), NA_character_),
  api_key = Sys.getenv(paste0(prefix, "_API_KEY"), NA_character_),
  token,
  token_fallback_api_key = api_key,
  prefix = "CONNECT",
  ...,
  .check_is_fatal = TRUE
)
}
\arguments{
\item{server}{The URL for accessing Posit Connect. Defaults to environment
variable CONNECT_SERVER}

\item{api_key}{The API Key to authenticate to Posit Connect with. Defaults
to environment variable CONNECT_API_KEY}

\item{token}{Optional. A user session token. When running on a Connect server,
creates a client using the content viewer's account. Running locally, the
created client uses the provided API key.}

\item{token_fallback_api_key}{Optional. When a \code{token} is provided, but
content is running locally, this API key is used to create the client.
By default, the primary \code{api_key} is used, but by providing a different
key you can test a visitor client with differently-scoped permissions.}

\item{prefix}{The prefix used to determine environment variables}

\item{...}{Additional arguments. Not used at present}

\item{.check_is_fatal}{Whether to fail if "check" requests fail. Useful in
rare cases where more http request customization is needed for requests to
succeed.}
}
\value{
A Posit Connect R6 object that can be passed along to methods
}
\description{
Creates a connection to Posit Connect using the server URL and an API key.
Validates the connection and checks that the version of the server is
compatible with the current version of the package.
}
\details{
When running on Connect, the client's environment will contain default
\code{CONNECT_SERVER} and \code{CONNECT_API_KEY} variables. The API key's permissions
are scoped to the publishing user's account.

To create a client with permissions scoped to the content viewer's account,
call \code{connect()} passing a user session token from content session headers
to the \code{token} argument. To do this, you must first add a Connect API
integration in your published content's Access sidebar.
}
\examples{
\dontrun{
client <- connect()

# Running in Connect, create a client using the content visitor's account.
# This example assumes code is being executed in a Shiny app's `server`
# function with a `session` object available.
token <- session$request$HTTP_POSIT_CONNECT_USER_SESSION_TOKEN
client <- connect(token = token)

# Use with a differently-scoped API key
fallback_key <- Sys.getenv("VIEWER_SCOPED_API_KEY")
client <- connect(token = token, token_fallback_api_key = fallback_key)
}

\dontshow{if (identical(Sys.getenv("IN_PKGDOWN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

# default is to read CONNECT_SERVER and CONNECT_API_KEY environment variables
# this example will read TEST_1_SERVER and TEST_1_API_KEY
connect(prefix = "TEST_1")
\dontshow{\}) # examplesIf}
}
